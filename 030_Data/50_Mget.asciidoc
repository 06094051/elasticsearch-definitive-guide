=== Retrieving multiple documents

As fast as Elasticsearch is, it can be faster still. Combining multiple
requests into one avoids the network overhead of processing each
request individually.

If you know that you need to retrieve multiple documents from Elasticsearch,
it is faster to retrieve them all in a single request using the
_multi-get_ or `mget` API, instead of document-by-document.

The `mget` API expects a `docs` array, each element of
which specifies the `_index`, `_type` and `_id` metadata of the document
you wish to retrieve. You can also specify a `fields` parameter if you
just want to retrieve one or more specific fields:

[source,js]
--------------------------------------------------
GET /_mget
{
   "docs" : [
      {
         "_index" : "website",
         "_type" :  "blog",
         "_id" :    2
      },
      {
         "_index" : "website",
         "_type" :  "pageviews",
         "_id" :    1,
         "fields":  ["views"]
      }
   ]
}
--------------------------------------------------


The response body also contains a `docs` array which contains a response
per document, in the same order as specified in the request. Each of these
responses is the same response body that we would expect from an individual
<<get-doc,`get` request>>:

[source,js]
--------------------------------------------------
{
   "docs" : [
      {
         "_source" : {
            "text" :  "This is a piece of cake...",
            "title" : "My first external blog entry"
         },
         "_index" :   "website",
         "_id" :      "2",
         "_type" :    "blog",
         "exists" :   true,
         "_version" : 10
      },
      {
         "_index" :   "website",
         "_id" :      "1",
         "_type" :    "pageviews",
         "exists" :   true,
         "_version" : 2,
         "fields" : {
            "views" : 1
         }
      }
   ]
}
--------------------------------------------------


If the documents you wish to retrieve are all in the same `_index` (and maybe
even of the same `_type`) then you can specify a default `/_index` or a default
`/_index/_type` in the URL.

You can still override these values in the individual requests:

[source,js]
--------------------------------------------------
GET /website/blog/_mget
{
   "docs" : [
      {
         "_id" :   2
      },
      {
         "_type" : "pageviews",
         "_id" :   1
      }
   ]
}
--------------------------------------------------


In fact, if all the documents have the same `_index` and `_type`, then you
can just pass an array of `ids` instead of the full `docs` array:


[source,js]
--------------------------------------------------
GET /website/blog/_mget
{
   "ids" : [ "2", "1" ]
}
--------------------------------------------------


Note that the second document that we requested doesn't exist. We
specified type `blog`, but the document with ID `1` is of type `pageviews`.
This non-existence is reported in the response body:

[source,js]
--------------------------------------------------
{
  "docs" : [
    {
      "_index" :   "website",
      "_type" :    "blog",
      "_id" :      "2",
      "_version" : 10,
      "exists" :   true,
      "_source" : {
        "title":   "My first external blog entry",
        "text":    "This is a piece of cake..."
      }
    },
    {
      "_index" :   "website",
      "_type" :    "blog",
      "_id" :      "1",
      "exists" :   false
    }
  ]
}
--------------------------------------------------


==== Type considered optional

The `_type` parameter is actually optional.  If we were to run the same request
but without specifying the `_type`, then we would get back both documents.
However, this assumes that documents of different types do not
share IDs.

What would the following request return if we had a `blog` document with
ID `1` and a `pageviews` document also with ID `1`?

[source,js]
--------------------------------------------------
GET /website/_mget
{
   "ids" : [ "2", "1" ]
}
--------------------------------------------------


Elasticsearch would return the first matching document that it finds. On one
run you may get back the `blog` document and on another run the `pageviews`
document.

You either need to be sure that all of your document IDs in an index are
unique across all types, or you should explicitly specify the `_type` of
document that you are after.
