=== Talking to Elasticsearch

How you talk to Elasticsearch depends on whether you are using Java or not.

==== Java API

If you are using Java, then Elasticsearch provides two built-in clients
which you can use in your code:

Node client::
    The node client joins a local cluster as a _non-data node_. In other
    words, it doesn't hold any data itself, but it knows what data lives
    on which node in the cluster, and can forward requests directly
    to the correct node.

Transport client::
    The lighter weight transport client can be used to send requests to
    a remote cluster. It doesn't join the cluster itself, but simply
    forwards requests to a node in the cluster.

Both Java clients talk to the cluster over *port 9300*, using the native
Elasticsearch protocol.  The nodes in the cluster also communicate
with each other over port 9300. If this port is not open, then your nodes will
not be able to form a cluster.

[NOTE]
====
The Java client must be from the same version of Elasticsearch as the nodes,
otherwise they may not be able to understand each other.
====

==== RESTful API with JSON over HTTP

All other languages can communicate with Elasticsearch over *port 9200* using
a RESTful API, accessible with your favorite HTTP library. In fact, as you have
seen above, you can even talk to Elasticsearch from the command line, using the
`curl` command.

All requests consist of:

* an appropriate HTTP method: `GET`, `POST`, `PUT`, `HEAD` or `DELETE`
* the protocol and hostname of any node in the cluster,
  eg: `http://localhost:9200` or even just `localhost:9200`
* the path of the resource you want to use, eg: `/_count`
* any optional query string parameters, eg `?pretty` will _pretty-print_
  the JSON response to make it easier to read
* a JSON encoded request body (if the request needs one)

For instance, to count the number of documents in the cluster, we could
use:

[source,js]
--------------------------------------------------
GET /_count?pretty
{
    "match_all": {}
}
--------------------------------------------------

All responses consist of:

* an HTTP status code, eg: `200 OK`
* a response body encoded in JSON (except for `HEAD` requests, which don't
  return a body)

The above `curl` request would respond with a JSON body like the
following:

[source,js]
--------------------------------------------------
{
    "count" : 0,
    "_shards" : {
        "total" : 5,
        "successful" : 5,
        "failed" : 0
    }
}
--------------------------------------------------


We don't see the HTTP headers in the response because we didn't ask `curl` to
display them. To see the headers, use the `curl` command with the `-i`
switch:

[source,js]
--------------------------------------------------
curl -I -XGET 'localhost:9200/'
--------------------------------------------------


We will use this `curl` format in all of our examples because it is easy to
read and easy to translate into a request using the HTTP library of your
choice.

.Curl Shorthand
****
For the rest of the book, you'll notice curl examples in the shorthand format 
used above.  The curl command is shortened from:

[source,js]
--------------------------------------------------
curl -XGET 'localhost:9200/_count?pretty' -d '
{
    "match_all": {}
}'
--------------------------------------------------

to simply:

[source,js]
--------------------------------------------------
GET /_count?pretty
{
    "match_all": {}
}
--------------------------------------------------

This is done to space and repetitive typing.  We will show you the HTTP method
(GET, PUT, POST, etc) and the URL path which follows `localhost:9200`.  The
rest of the lines following the curl command are the body of the request.
****
