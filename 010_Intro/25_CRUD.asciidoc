=== Indexing documents

Before we can _index_ (store and make searchable) our user document in
Elasticsearch, we need to decide what the document represents, and where to
store it.

In Elasticsearch, a document belongs to a _type_, and those types live inside
an _index_. You can draw some (rough) parallels to a traditional relational database:


    Relational DB  ⇒ Databases ⇒ Tables ⇒ Rows      ⇒ Columns
    Elasticsearch  ⇒ Indices   ⇒ Types  ⇒ Documents ⇒ Fields

An Elasticsearch cluster can contain multiple _indices_ (databases), which in
turn contain multiple _types_ (tables). These types hold multiple _documents_
(rows), and each document has multiple _fields_ (columns).

==== An example
We are going to store a document in the `blogs` index, as type `user`, and we
can assign this user the unique ID `johnsmith`. Notice how
the `index`, `type` and `id` are specified in the path of the URI, rather
than in the document itself:

[source,js]
--------------------------------------------------
      <1>    <2>    <3>
PUT /blogs/user/johnsmith
{   <4>
    "email":     "john@smith.com",
    "name": {
        "first": "John",
        "last":  "Smith"
    },
    "bio":       "Eco-warrior and defender of the weak",
    "age":       25,
    "join_date": "2013/05/01",
    "interests": ["dolphins", "whales"]
}
--------------------------------------------------
<1> Index: `blogs`
<2> Type: `user`
<3> ID: `johnsmith`
<4> Document body

And we receive the following response, which confirms that our document
has been indexed correctly:

[source,js]
--------------------------------------------------
{
   "_index": "blogs",
   "_type": "user",
   "_id": "johnsmith",
   "_version": 1,
   "created": true
}
--------------------------------------------------


Congratulations! You just indexed your first document! How easy was that?

=== Real-time GET

Elasticsearch has _real-time GET_. In other words, as soon as a document
has been indexed it can be retrieved from any node in the cluster.

Not only that, but changes to documents are _persistent_: if the whole cluster
were to suffer a power failure immediately after indexing a document, the
change would still be there when the cluster is restarted.

We can retrieve (or `GET`) the document using the same `index`, `type` and `id`
that we specified when indexing it:

[source,js]
--------------------------------------------------
GET /blogs/user/johnsmith
--------------------------------------------------

The response contains the exact same JSON document that we indexed, as the
`_source` field, plus some extra metadata:

[source,js]
--------------------------------------------------
{
    "_index" :    "blogs",
    "_type" :     "user",
    "_id" :       "johnsmith",
    "_version" :  1,
    "found" :    true,
    "_source" :   {
         "email":     "john@smith.com",
         "name": {
             "first": "John",
             "last":  "Smith"
         },
         "bio":       "Eco-warrior and defender of the weak",
         "age":       25,
         "join_date": "2013/05/01",
         "interests": ["dolphins", "whales"]
    }
}
--------------------------------------------------




