[[pooled-fields]]
=== Pooled fields

By default, each field is indexed into its own inverted index named after the
field name.  So for a document like the following:

[source,js]
--------------------------------------------------
{
    "first": "John",
    "last":  "Smith",
    "addr": {
        "city":     "Barcelona",
        "country":  "Spain"
    }
}
--------------------------------------------------

the `first` and `last` fields are indexed into the `first` and `last` inverted
indices respectively, and the `city` and `country` fields would be indexed
into `addr.city` and `addr.country` respectively. You can still search on
`city` and `country` rather than using the full name because Elasticsearch
keeps a record of the short and long versions of each index name.

However, we can control which inverted index each field uses, with the
`index_name` parameter.  If we give `first` and `last` the same index name
then the tokens from both fields will be indexed into the same index,  meaning
that we can search them as if they were one pooled field.

In order to use pooled fields, we need to set the `index_name` in the mapping:

[source,js]
--------------------------------------------------
PUT /my_index/
{
    "mappings": {
        "user": {
            "properties": {
                "first": {
                    "type":       "string",
                    "index_name": "full" <1>
                },
                "last": {
                    "type":       "string",
                    "index_name": "full" <1>
                }
            }
        }
    }
}
--------------------------------------------------
<1> The `first` and `last` fields will both be indexed into
    (and searchable via) the `full` inverted index.

Now we can index our document:

[source,js]
--------------------------------------------------
PUT /my_index/user/1
{
    "first": "John",
    "last":  "Smith"
}
--------------------------------------------------

And a `match` query against the `full` field now returns our document, even
with `operator` set to `"and"`:

[source,js]
--------------------------------------------------
GET /my_index/user/_search
{
    "query": {
        "match": {
            "full": {
                "query":    "John Smith",
                "operator": "and"
            }
        }
    }
}
--------------------------------------------------

A downside to this solution is that the `first` and `last` fields can no
longer be queried independently - the   values from both fields are only
indexed into the `full` inverted index.   If you try to search on the  `first`
or `last` field, it will actually query the `full` inverted index. Later, in
<<TODO>> we will demonstrate how to use pooled fields while still indexing
each field independently.
