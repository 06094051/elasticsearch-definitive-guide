=== Boosting query clauses

Imagine that we want to search for documents about "full text search"  but we
want to give more _weight_ to documents which also mention "Elasticsearch" or
"Lucene". By ``more weight'' we mean that documents which mention
"Elasticsearch" or "Lucene" will get a higher relevance `_score`, which means
that they will appear higher in the list of results.

A simple `bool` query allows us to write this fairly complex query as follows:

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "bool": {
            "must": {
                "match": {
                    "content":
                        "query":    "full text search",
                        "operator": "and"
                    }
                }
            },
            "should": [
                { "match": { "content": "Elasticsearch" }},
                { "match": { "content": "Lucene"        }}
            ]
        }
    }
}
--------------------------------------------------

The more `should` clauses that match, the more relevant the document.  But
what if we want to give more weight to the docs which also contain "Lucene"
and even more weight to the docs containing "Elasticsearch"?

Any query clause allows us to specify a `boost` value, which defaults to `1`.
A `boost` value greater than `1` increases the relative weight of that
clause.  So we could  rewrite the above query as follows:

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "bool": {
            "must": {
                "match": {  <1>
                    "content":
                        "query":    "full text search",
                        "operator": "and"
                    }
                }
            },
            "should": [
                { "match": {
                    "content": {
                        "query": Elasticsearch",
                        "boost": 3 <2>
                    }
                }},
                { "match": {
                    "content": {
                        "query": Lucene",
                        "boost": 2 <3>
                    }
                }}
            ]
        }
    }
}
--------------------------------------------------

<1> This clauses use the default `boost` of `1`.
<2> This clause is the most important, as it has the highest `boost`.
<3> This clause is more important than the default, but not as important
    as the "Elasticsearch" clause.

**************************************************

The `boost` parameter is used to increase the relative weight of a clause
(with a `boost` greater than `1`) or decrease the relative weight (with a
`boost` between `0` and `1`), but the increase or decrease is not linear. In
other words, a `boost` of `2` does not result in double the `_score`.

Instead, the new `_score` is _normalized_ after the boost is applied. Each
type of query has its own normalization algorithm and the details are beyond
the scope of this book. Suffice to say that a higher `boost` value results in
a higher `_score`.

If you are implementing your own scoring model not based on TF/IDF and you
need more control over the boosting process, you can use the
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#_boost_factor[`boost_factor`]
parameter in the `function_score` query to perform simple multiplication
without the normalization step.

**************************************************

