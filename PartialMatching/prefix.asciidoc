
The first method we'll talk about is called prefix matching.  The concept is very simple: find all values that start with the prefix that I provide.

Imagine we have a document that says "quick brown fox" and "quite enough foxes".  You want to find anything that starts with "qui".  The Prefix query makes this task easy:

[source,js]
--------------------------------------------------
 {
     "prefix" : { "my_field" : "qui" }
 }
--------------------------------------------------


So what's going on under the surface?  Internally, there are two operations taking place.  First, Elasticsearch formulates your query as a regular expression in the form of `/qui.*/` (e.g. the value "qui" followed by anything).  It then traverses the term dictionary to find all possible terms that match this pattern.

Once it has a list of matching terms, the prefix query is rewritten as a Boolean of the matching terms from the first step.  With this newly rewritten query, the index is searched as normal.  

This process - rewriting the query before searching - makes prefix match fairly efficient, especially when compared to the naive approach of scanning every document for matching prefixes.

.Not Analyzed
****
Important note: the Preix query is not analyzed.  If you provide a full text query, it will be treated as a single token (spaces and all).  If you need analysis and full-text prefix matching, we'll cover that in the `match_phrase_prefix` section shortly
****