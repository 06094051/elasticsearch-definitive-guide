[[query-structure]]
=== Structure of a query

As mentioned above, there are references to `query` and `filter` parameters
throughout the Elasticsearch API.  In this section, we will focus on
the most common use for queries: searching for relevant documents.

For this we use the `query` parameter in the `search` API:

    curl -XGET localhost:9200/_search -d '{
        "query": YOUR_QUERY_HERE
    }
    '

The `query` parameter implies _query context_, which means that it can accept
any single query clause. If none is provided, then it defaults to the
`match_all` query which, unsurprisingly, matches all documents:

    curl -XGET localhost:9200/_search -d '{
        "query": { "match_all": {} }
    }
    '

==== A simple query

A simple `match` query clause which searches the `title` field for the words
`"search is cool"` can be written as:

    { "match" :  { "title" : "search is cool" }}

We can pass that as our single query clause to `search` as follows:

    curl -XGET localhost:9200/_search -d '
    {
        "query" : {
            "match" :  { "title" : "search is cool" }
        }
    }
    '

==== A simple filter

To return only documents whose `status` field is set to the value `"active"`,
we can use a `term` filter clause:

    { "term" :  { "status" : "active" }}

However, our `query` parameter implies _query context_, which only accepts a
query clause.  To switch into _filter context_ we can wrap our filter in  a
`constant_score` query clause:

    {
        "constant_score" : {
            "filter" :   { "term" :  { "status" : "active" }}
        }
    }

The full search request would be:

    curl -XGET localhost:9200/_search -d '
    {
        "query" :     {
            "constant_score" : {
                "filter" :   { "term" :  { "status" : "active" }}
            }
        }
    }
    '

==== Filtering a query

Now, to combine our query for `"search is cool"` with our filter for
`status=active`, we need a single query clause which can accept both
a `query` and a `filter` -- the `filtered` query:


    {
        "filtered" : {
            "query" :    { "match" : { "title" :  "search is cool" }},
            "filter" :   { "term" :  { "status" : "active" }}
        }
    }

The full search request would look like this:

    curl -XGET localhost:9200/_search -d '
    {
        "query" : {
            "filtered" : {
                "query" :    { "match" : { "title" :  "search is cool" }},
                "filter" :   { "term" :  { "status" : "active" }}
            }
        }
    }
    '

[NOTE]
===============================
As has been explained above, query and filter clauses
are building blocks which can be used throughout the Elasticsearch
API, wherever a parameter called `query` or `filter` is accepted.
It is not limited just to the `search` API.

In the examples above, we have shown you the syntax of a complete search
request.  In the following chapters, which explain the various query and filter
clauses that are available, we will no longer include the full `curl` statement,
as it should be obvious now how to pass a query clause to the
`query` parameter of the `search` API.
===============================
