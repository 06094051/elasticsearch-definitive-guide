[[query_structure]]
=== Structure of a query

The filter and query clauses described in this chapter can be combined
with each other to form complex queries, but the search API expects a
single `query` parameter. If none is specified, then it defaults to a
<<match_all_query,`match_all` query>> which, unsurprisingly, matches
all documents.

Later on we will discuss the options available for combining clauses, but
as a simple introduction, let's consider three simple cases:

==== A simple query

A simple `match` query clause which searches the `title` field for the words
`"search is cool"` would look like this:

    {
        "match" :  { "title" : "search is cool" }
    }

This query clause should be used as the value of the `query` parameter in the
search API:

    curl -XGET localhost:9200/_search -d '
    {
        "query" : {
            "match" :  { "title" : "search is cool" }
        }
    }
    '

==== Filtering a query

To limit the results to only those documents whose `status` field is set to
the value `"active"`, you can combine your query clause with a filter clause
using a `filtered` query:

    {
        "filtered" : {
            "query" :    { "match" : { "title" :  "search is cool" }},
            "filter" :   { "term" :  { "status" : "active" }}
        }
    }

The full request would look like this:

    curl -XGET localhost:9200/_search -d '
    {
        "query" : {
            "filtered" : {
                "query" :    { "match" : { "title" :  "search is cool" }},
                "filter" :   { "term" :  { "status" : "active" }}
            }
        }
    }
    '

==== A filter without a query

What if you wanted to apply just the `status is "active"` filter without any
associated query? The `query` parameter only accepts a query, so you need
to *wrap your filter in a query*.  One possibility is the `filtered` query
mentioned above:

    {
        "filtered" : {
            "query" :    { "match_all: {}},
            "filter" :   { "term" :  { "status" : "active" }}
        }
    }

Another possibility is to use the
<<constant_score_query,`constant_score` query>>, which wraps the filter
without requiring any query clause:

    {
        "constant_score" : {
            "filter" :   { "term" :  { "status" : "active" }}
        }
    }

The full request would look like this:

    curl -XGET localhost:9200/_search -d '
    {
        "query" :     {
            "constant_score" : {
                "filter" :   { "term" :  { "status" : "active" }}
            }
        }
    }
    '

[NOTE]
===============================
As will be explained in the following chapters, query and filter clauses
are building blocks which can be combined and nested in complex and
interesting ways. However, the search API expects a *single* query clause to
be passed as the value of the `query` parameter.

We will not be repeating the full `curl` statement for every query clause,
as it should already be obvious from the above examples how to pass queries to
the search API.
===============================

