=== Schema mapping

We've said that Elasticsearch is schema-free, but in order to query your
data meaningfully, Elasticsearch needs to understand what type of data each 
field contains.

We can see how our fields from the example have been interpreted by retrieving
the current _mapping_ or schema definition:

    curl -XGET 'http://localhost:9200/blogs/_mapping?pretty'

which looks like this:

    {
      "blogs" : {
        "user" : {
          "properties" : {
            "age" :       { "type" : "long"   },
            "bio" :       { "type" : "string" },
            "email" :     { "type" : "string" },
            "interests" : { "type" : "string" },
            "join_date" : {
                "type" : "date",
                "format" : "yyyy/MM/dd HH:mm:ss||yyyy/MM/dd"
            },
            "name" : {
                "dynamic" : "true",
                "properties" : {
                  "first" : { "type" : "string" },
                  "last" :  { "type" : "string" }
                }
            }
    }}}}

We can see that Elasticsearch has done a reasonable job of interpreting our 
data types:

* the numeric field `age` has been assigned type `long`
* string fields, including the multi-value field `interests`, are 
  assigned type `string`
* the string field `join_date` has correctly been recognised as type `date`
* the embedded object `name` has two string fields: `first` and `last`

With the mapping as it is, we are already well positioned to add a search
service to our blogging website.

But search engines are sophisticated.  With the domain specific knowledge
that you have about your own data, you can tailor the mapping to your needs,
adding for example:

 * autocomplete searches to the `title` field
 * language specific analysis to the `title` and `content` fields
 * geo-location information for results-near-you

.Schema mapping
****
Instead of relying on the dynamic detection of fields, we can
specify our own custom analyzers and field mapping, taking control over 
how the value for each field should be analyzed and indexed.
****


 
    