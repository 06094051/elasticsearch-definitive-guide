
Phrase matching is a great asset, but sometimes it can be a bit too restrictive.  Sometimes you want to allow a little sloppiness in your phrase matches.  Maybe you want both "Sue ate alligator" and "Sue ate one alligator" to match.

You can configure how sloppy the query is using the `slop` option in a `match_phrase` query:

[source,js]
--------------------------------------------------
 {
     "match_phrase" : {
         "message" : "Sue ate alligator",
         "slop" : 10
     }
 }
--------------------------------------------------


Slop is actually a measurement of how many edits are needed to match the query.  Each time a token is moved it counts as an edit.  The default slop value is zero, which is why the default `match_phrase` query performs exact exact phrase matches.  

A slop of one allows a single token to move: "Sue ate one alligator" is one edit distance from the original query because a single token was inserted.  Slop of two would allow "Sue ate one fat alligator", etc etc.

It is important to note that slop does not guarantee order.  An edit is an edit...it doesn't care about order. 

A slop of two also matches "Sue alligator ate".  Two edits are used to rearrange "alligator" and "ate" , and since slop doesn't care about order at all, this is a valid sloppy match.  With just slop of two, you can get all of these matches and more:

- "alligator Sue ate"
- "Mary Sue ate fried alligator"
- "Sue quickly ate fried alligator"

You can see how, even with just a slop of two, matching documents can become rather diverse.  Be careful with large values of slop as this can easily pull documents that are only passingly relevant to your query.

With that said, matching documents with fewer edits will score higher than those that have large edits.  So a high slop is not necessarily bad, since they will have a correspondingly low score.

Sloppy matching can also be performed with query_string syntax by using a tilde (~):

[source,js]
--------------------------------------------------
 {
     "query_string" : {
         "default_field" : "test",
         "query" : "\"Sue jumped over the table\"~5"
     }
 }
--------------------------------------------------


The number following the tilde is the amount of slop that you want to allow.  Other than syntax, it functions exactly the same as match_phrase slop.