
==== Match_phrase Query

The easiest way to do phrase matching is with our much loved friend, the Match query.  Match query has a special mode, `match_phrase`, which performs proximity phrase matches for you.

A match_phrase query will first analyze your text into tokens, then construct a phrase query based on the analyzed tokens.  For example, if your search text is "Sue jumped over the table" and you are using the standard analyzer,
your phrase search will actually be ["sue jump table"].

	{
        "match_phrase" : {
        "message" : "Sue jumped over the table"
        }
    }
	
==== Query_string Query

The Lucene parser used in query_string also supports phrase matching. When search text is wrapped in quotation marks (like you would do in Google), the text is considered a phrase.

[source,js]
--------------------------------------------------
{
    "query_string" : {
        "default_field" : "test",
        "query" : "\"Sue jumped over the table\""
    }
}
--------------------------------------------------


Make sure the quotation marks are properly escaped so that the JSON is valid.  Phrase matching with quotation marks works on all queries that are derived from the Lucene parser (Field Query, q-param syntax, etc).