
So far, we've only talked about proximity matching that is calculated at query-time.  Match_phrase calculates the matching documents and their phrases at the time of the query.

Depending on your use-case, it may make sense to pay the processing burden at index-time rather than query-time.  If your index sees high search throughput but relatively minor indexing throughput (or you do indexing in large batches), index-time proximity searching may be a better fit.

Nothing comes for free, however, and the downside of index-time methods is that they physically bloat your index.

Index-time phrase matches are accomplished using the `shingle` token filter.  This filter takes the token stream and constructs mini-phrases out of adjacent tokens.

For example, the sentence "quick brown fox jumped over the moon", could be shingled into the following tokens:

- [quick brown]
- [brown fox]
- [fox jumped]
- [jumped over]
- [over the]
- [the moon]

Since these phrases are then indexed, you can do exact matches on portions of a phrase, instead of doing a sloppy, query-time phrase match.

The shingle filter is added to your mappings like any other filter, and has various options that control how big your shingles should be, if you want unigrams, etc.

==== Shingles and Stop words

If you want to remove stop words, there are a few extra steps that you need to do.

First, you'll want to make sure your stop filter comes before the shingle filter, since you don't want stop words included in the phrases.  Next, you'll want to disable position increments in your stop filter.  Here is an example analyzer setup:

    {
       "analysis":{
          "analyzer":{
             "analyzer_shingle":{
                "tokenizer":"standard",
                "filter":[ "standard", "lowercase", "filter_stop", "filter_shingle" ]
             }
          },
          "filter":{
             "filter_shingle":{
                "type":"shingle",
                "max_shingle_size":2,
                "min_shingle_size":2,
                "output_unigrams":"true"
             },
             "filter_stop":{
                "type":"stop",
                "enable_position_increments":"false"
             }
          }
       }
    }

Why do you need to disable position increments?  When removing stop-words, Lucene will continue incrementing the position - you end up with a gap in the position list.  If you shingle over this list, you'll actually index underscore placeholders where the stop word used to reside:

"test text to see" will be shingled into the following:

    [test text _]
    [text _ see]
    [_ see shingles]

By disabling position increments in the stop-word filter, these underscores are avoided and you get expected shingling behavior


