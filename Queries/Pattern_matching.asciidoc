[[pattern_queries]]
=== Pattern matching: Wildcards and regular expressions

[[wildcard_query]]
==== `wildcard` query

A wildcard query allows the substitution of a single character with `"?"`
and zero or more characters with `"*"`, for instance `b?o*n` would match
`brown`, `blown` and `boomtown`.


    {
        "wildcard": {
            "tag": "b.o*n"
        }
    }

[[regexp_query]]
==== `regexp` query

A regular expression query supports the use of Lucene-style regular
expressions to match terms. A regular expression (_regexp_) like
`joh?n(ath[oa]n)?` will match `john`, `jon`, `johnathon`, `johnathan`,
`jonathon` and `jonathan`.

    {
        "regexp": {
            "name": "joh?n(ath[oa]n)?"
        }
    }

The full supported syntax is explained in <<regexp_syntax>>.

Wildcard queries are really just simplified regular expression
queries. The wilcard example given above could be rewritten with this
regular expression: `b.o.*n`

****
Wildcard and regexp queries have the same mechanism and limitations as the
<<prefix_queries,`prefix` queries>> -- they need to find all
of the terms in the index which match the pattern in the wildcard or regular
expression query and run a `term` query against each of them.

These can be very heavy, very memory intensive queries. Use with caution!

A wildcard query beginning with a `"?"` or `"*"` (or the equivalent regexp)
means that every term in the index must be visited!
Avoid queries like these unless you have a small
number of unique terms.

The longer the prefix, the less work the query needs to do.
****

Like the `prefix` query, the `wildcard` and `regexp` queries:

--
* are <<term_queries,term-based>> -- they does no analysis on the
  query string
* return a `_score` of 1 for all matching documents
* are rewritten into multiple queries, as explained in <<multi_term_rewrite>>.
--

==== Pattern matching with the `query_string` query

The <<query_string_query,`query_string` query>> mini-language understands
wildcards:

    "quick b.o*n fox"

and regexps, which are indicated by surrounding the pattern with forward
slashes (`"/"`):

    "quick /brown|red|green|gr[ea]y/ fox"

The `query_string` query accepts three parameters which are related
to wildcard and regexp queries:

`allow_leading_wildcards`::
    This defaults to `true`, allowing queries like `"*ing"`.  As explained
    above, leading wildcards can generate very heavy queries, and you should
    probably disable this option.

`analyze_wildcard`::
    By default wildcarded terms are not passed through the analyzer, as it
    is seldom possible to analyze terms which are missing letters correctly.
    Set this to `true` only if you know what you are doing.

`lowercase_expanded_terms`::
    Most analyzers will have lowercased the terms they produce before storing
    them in the index, so it makes sense to do the same for wildcarded
    terms.  This defaults to `true`.
