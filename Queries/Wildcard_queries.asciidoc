[[wildcard_queries]]
=== Wildcard queries

A wildcard query allows the substitution of a single character with `"?"`
and zero or more characters with `"*"`, for instance `"b?o*n"` would match
`brown`, `blown` and `boomtown`.

Wildcard queries have the same mechanism and limitations as the
<<prefix_queries,`prefix` queries>> -- they need to
check all of the terms in the index to find those terms that match
the wildcard query, and the longer the prefix, the less work the query
needs to do.

A wildcard query beginning with a `?` or `*` means that every term in the
index must be visited! Avoid queries like these unless you have a small
number of unique terms.

[WARNING]
====
This can be a very heavy, very memory intensive and very slow query.
Use with caution!
====

There are two queries which support wildcard searches: the `wildcard`
and `query_string` queries.

The `wildcard` query, like the `prefix` query:

--
* is <<term_queries,term-based>> -- it does no analysis on the
  query string
* returns a `_score` of 1 for all matching documents
* is rewritten into multiple queries, as explained in <<multi_term_rewrite>>.
--

    {
        "wildcard": {
            "tag": "b.o*n"
        }
    }

The <<query_string_query,`query_string` query>> mini-language understands
wildcards, allowing query strings like: `"quick b.o*n fox*"`. There
are three parameters which are useful to know about:

`allow_leading_wildcards`::
    This defaults to `true`, allowing queries like `"*ing"`.  As explained
    above, leading wildcards can generate very heavy queries, and you should
    probably disable them.

`analyze_wildcards`::
    By default wildcarded terms are not passed through the analyzer, as it
    is seldom possible to analyze terms which are missing letters correctly.
    Set this to `true` only if you know what you are doing.

`lowercase_expanded_terms`::
    Most analyzers will have lowercased the terms they produce before storing
    them in the index, so it makes sense to do the same for wildcarded
    terms.  This defaults to `true`.
