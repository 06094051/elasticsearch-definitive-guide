[[match-query]]
=== `match` query and full text search

The `match` query, which we have already encountered in <<exact-queries>>,
comes into its own when used on full text string fields.

To search the full text `title` field, we can write:

[source,js]
--------------------------------------------------
{ "match": { "title": "Quick Brown Fox" }}
--------------------------------------------------


First, it analyzes the query string into terms:

`"Quick Brown Fox"` -> `["quick", "brown", "fox"]`

Then it generates a query clause for each of these terms, and combines them
together in one of these forms:

 * `"quick" OR  "brown" OR  "fox"`
 * `"quick" AND "brown" AND "fox"`

Which form is chosen depends on the `operator` paramter, which can be
set to `"or"` to match *any* terms -- the default -- or `"and"` to
match *all* terms:

[source,js]
--------------------------------------------------
{
    "match" : {
        "title" : {
            "operator" : "and",
            "query"    : "Quick Brown Fox"
        }
    }
}
--------------------------------------------------


_Note how the form of the `match` query changed to allow it to accept
the additional `"operator"` parameter._

==== `minimum_should_match`

Requiring ALL terms may be too strict. When using the default `"or"` operator,
the relevance `_score` from each matching term is combined to produce
the final `_score` -- the more terms that match, the more relevant.

However, documents which only match one of several terms would still be
included in our search results, even though they do not appear terribly relevant.
We can control how strictly or leniently to match using the
`minimum_should_match` parameter.

For instance, we could
specify that at least `70%` of the terms should be present:

[source,js]
--------------------------------------------------
{
    "match" : {
        "title" : {
            "query"                : "Quick Brown Fox",
            "minimum_should_match" : "70%"
        }
    }
}
--------------------------------------------------


The `minimum_should_match` parameter can accept a variety of formats, which
are explained in <<minimum-should-match-formats>>.

.`"type: boolean"`
****
The individual sub-queries for `quick`, `brown` and `fox` are combined together
using a <<bool-query,`bool` query>>, which we will discuss later. The `bool`
query combines the relevance `_score` for each sub-query into a final `_score`
for all three words. In fact, the `minimum_should_match` parameter comes from
the `bool` query.

For this reason, the default `match` query is `"type": "boolean"`. Below
we discuss the other two types:
<<match-phrase-query,`phrase`>> and
<<match-phrase-prefix-query,`phrase_prefix`>>.
****
