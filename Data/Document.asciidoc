=== What is a document?

Most objects in most applications can be serialized into a JSON object,
with keys and values, where the _key_ is the name of the field or property,
and the _value_ can be a string, a number, a boolean, another object,
an array of values, or some other specialized type, such as
a string representing a date, or an object representing a geolocation:

    {
        "name":         "John Smith",
        "age":          42,
        "confirmed":    true,
        "join_date":    "2013-06-01",
        "home": {
            "lat":      51.5,
            "lon":      0.1
        },
        "accounts": [
            {
                "type": "facebook",
                "id":   "johnsmith"
            },
            {
                "type": "twitter",
                "id":   "johnsmith"
            }
        ]
    }

****
Quite often, we use the terms _object_ and _document_ interchangably. However,
there is a distinction.  An object is just a JSON object -- similar to
a hashmap in other languages -- and objects may contain other objects.
In Elasticsearch, the term _document_ has a specific meaning. It refers
to the top-level or _root object_ which is serialized into JSON and
stored in Elasticsearch, rather than to any sub-objects which the document
may contain.
****

But a document doesn't consist only of its data. It also has
_metadata_ -- information *about* the object. The four required metadata
elements are:

[horizontal]
`_index`::  Where this document lives.
`_type`::   The class of object that this document represents.
`_id`::     The unique identifier for this document.
`_source`:: The JSON document itself.


==== `_index`

An _index_ is a logical namespace which groups together one or more shards.
When we send a document in Elasticsearch, it is stored in a single primary
shard. However, this is an internal detail. Our application shouldn't care
about shards at all.  Instead, we store our document in an _index_, and
Elasticsearch takes care of the rest.

We will discuss how to create and manage indices ourselves in <<index-admin>>,
but for now we will let Elasticsearch create the index for us.  All we have
to do is to choose a name, which must be lowercase and cannot begin with
an underscore ``_''.

Let's use the index name `my_app`, which is as good a name as any.

==== `_type`

In most languages, we use objects
The objects in our application represent different things, e.g. a user,
a blog post, a comment, an email message etc.  In most languages, each
object has a different _class_. Each



With this metadata, we are able to store a document in Elasticsearch and
to retrieve it by ID -- in other words, to use Elasticsearch as a document
store.

