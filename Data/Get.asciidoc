[[get-doc]]
=== Retrieving a document

To get the document out of Elasticsearch, we use the the same `_index`, `_type`
and `_id`, but the HTTP verb changes to `GET`:

[source,js]
--------------------------------------------------
 GET /website/blog/123?pretty
--------------------------------------------------


The response includes the by now familiar metadata elements, plus the `_source`
field, which contains the original JSON document that we sent to Elasticsearch
when we indexed it.

[source,js]
--------------------------------------------------
 {
   "_index" :   "website",
   "_type" :    "blog",
   "_id" :      "123",
   "_version" : 1,
   "exists" :   true,
   "_source" : {
       "title": "My first blog entry",
       "text":  "Just trying this out..."
   }
 }
--------------------------------------------------


.`pretty`
****
By adding `pretty` to the query string parameters for any request, as in the
above example, Elasticsearch _pretty-prints_ the JSON response to make it more
readable. The `_source` field, however, isn't pretty-printed -- instead
we get back exactly the same JSON string that we passed in.
****

The response to the GET request includes `{"exists": true}`.
This confirms that the document was found.  If we were to request a document
that doesn't exist, we would still get a JSON response, but `exists` would be
set to `false`.

Also, the HTTP response code would be `'404 Not Found'` instead of `'200 OK'`.
We can see this by passing the `-i` argument to `curl`, which causes it to
display the response headers:

[source,js]
--------------------------------------------------
 curl -I -XGET /website/blog/124?pretty
--------------------------------------------------


The response now looks like this:

[source,js]
--------------------------------------------------
 HTTP/1.1 404 Not Found
 Content-Type: application/json; charset=UTF-8
 Content-Length: 83
--------------------------------------------------


    {
      "_index" : "website",
      "_type" : "blog",
      "_id" : "124",
      "exists" : false
    }

==== Retrieving part of a document

By default, a `get` request will return the whole document, as stored in
the `_source` field. But perhaps all you are interested in is the
`title` field.

Individual fields can be requested using the `fields` parameter. Multiple
fields can be specified in a comma-separated list:

[source,js]
--------------------------------------------------
 GET /website/blog/123?fields=title,text
--------------------------------------------------


The response no longer contains the `_source` field, but does contain
the `title` and `text` fields, which Elasticsearch has extracted from
the `_source`:

[source,js]
--------------------------------------------------
 {
   "_index" :   "website",
   "_type" :    "blog",
   "_id" :      "123",
   "_version" : 1,
   "exists" :   true,
   "fields" : {
       "title": "My first blog entry",
       "text":  "Just trying this out..."
   }
 }
--------------------------------------------------


The metadata elements (`_index` etc) will always be returned. These
cannot be disabled.