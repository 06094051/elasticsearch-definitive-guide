[[partial-updates]]
=== Partial updates to documents

In <<update-doc>>, we said that the way to update a document is to retrieve
it, change it, then reindex the whole document. This is true. However,
using the `update` API, we can make partial updates to a document
in a single client request, such as incrementing a counter.

We also said that documents are immutable -- they cannot be changed, only
replaced.  The `update` API has to obey the same rules.  Externally,
it appears as if we are partially updating a document in place.
Internally, the `update` API simply manages the same _retrieve-change-reindex_
process that we have already described, thus avoiding the network overhead of
multiple rexquests. By reducing the time between the _retrieve_ and
_reindex_ steps, we reduce the likelihood of there being conflicting
changes from other processes.

The simplest form of the `update` request accepts a partial document
as the `"doc"` parameter -- objects are merged together, existing scalar fields
are overwritten and new fields are added. For instance, we could add a
`tags` field and a `views` field to our blog post with:

[source,js]
--------------------------------------------------
 POST /website/blog/1/_update  
 {
    "doc" : {
       "tags" : [ "testing" ],
       "views": 0
    }
 }
--------------------------------------------------

    
If the request succeeds, we see a response similar to that
of the `index` request:

[source,js]
--------------------------------------------------
 {
    "ok" :       true,
    "_index" :   "website",
    "_id" :      "1",
    "_type" :    "blog",
    "_version" : 3
 }
--------------------------------------------------


However, if you would like to see what changes have been made, you can
request one or more fields with the `fields` query string parameter.  If you want
to see the whole document, then request the `_source` field:

[source,js]
--------------------------------------------------
 POST /website/blog/1/_update?fields=_source  
 {
    "doc" : {
       "tags" : [ "testing" ],
       "views": 0
    }
 }
--------------------------------------------------

    
Now you can see that our `tags` and `views` fields have been added to the
document:

[source,js]
--------------------------------------------------
 {
   "ok" :       true,
   "_index" :   "website",
   "_type" :    "blog",
   "_id" :      "1",
   "_version" : 4,
   "get" : {
     "exists"  : true,
     "_source" : {
         "title" :  "My first blog entry",
         "text"  :  "Starting to get the hang of this...",
         "tags"  :  [ "testing" ],
         "views" :  0
     }
   }
 }
--------------------------------------------------


==== Using scripts to make partial updates

We will discuss scripting in more detail in <<scripting>>, but for now it
is enough to know that scripts can be used in several places in Elasticsearch
to achieve custom actions that are not directly supported by the API.

Scripts can be used in the `update` API to change the content of the
`_source` field, which is known inside the script as: `ctx._source`

For instance, we could use a script to increment the number of `views`
that our blog post has had:

[source,js]
--------------------------------------------------
 POST /website/blog/1/_update?fields=views  
 {
    "script" : "ctx._source.views+=1"
 }
--------------------------------------------------

    
We requested the `views` field, so that we can see that it has been
incremented:

[source,js]
--------------------------------------------------
 {
    "ok" :       true,
    "_index" :   "website",
    "_type" :    "blog",
    "_id" :      "1",
    "_version" : 5,
    "get" : {
       "exists" : true,
       "fields" : {
          "views" : 1
       }
    }
 }
--------------------------------------------------


We can also use a script to add a new tag to the `tags` array.  In this
example we specify the new tag as a parameter rather than hard coding
it in the script itself. This allows Elasticsearch to reuse the script
in the future, without having to compile a new script for every new tag:

[source,js]
--------------------------------------------------
 POST /website/blog/1/_update?fields=tags  
 {
    "script" : "ctx._source.tags+=new_tag",
    "params" : {
       "new_tag" : "search"
    }
 }
--------------------------------------------------

    
The response shows that the `search` tag has been added to the `tags` array:

[source,js]
--------------------------------------------------
 {
    "ok" :       true,
    "_index" :   "website",
    "_type" :    "blog",
    "_id" :      "1",
    "_version" : 6,
    "get" : {
       "exists" : true,
       "fields" : {
          "tags" : [
             "testing",
             "search"
          ]
       }
    }
 }
--------------------------------------------------


We can even choose to delete a document based on it contents:

[source,js]
--------------------------------------------------
 POST /website/blog/1/_update 
 {
    "script" : "ctx._source.tags.contains(tag) ? ctx.op = \"delete\" : ctx.op = \"none\"",
     "params" : {
         "tag" : "testing"
     }
 }
--------------------------------------------------

    
==== Create or update

Imagine that we need to store a pageview counter in Elasticsearch. Every
time a user views a page, we increment the counter for that page.  But if
it is a new page, we can't be sure that a counter already exists, and
if we try to update a non-existent document, the update will fail.

In cases like these, we can use the `upsert` parameter to specify the
document that should be created if it doesn't already exist:

[source,js]
--------------------------------------------------
 POST /website/pageviews/1/_update?fields=views  
 {
    "script" : "ctx._source.views+=1",
    "upsert": {
        "views": 0
    }
 }
--------------------------------------------------

    
The first time we run this request, a new document is inserted which
initializes the `views` field to `0`:

[source,js]
--------------------------------------------------
 {
   "ok" :       true,
   "_index" :   "website",
   "_type" :    "pageviews",
   "_id" :      "1",
   "_version" : 1,
   "get" : {
     "exists" : true,
     "fields" : {
       "views" : 0
     }
   }
 }
--------------------------------------------------


On subsequent runs, the document already exists, so the `script` update
is applied instead:

[source,js]
--------------------------------------------------
 {
   "ok" :       true,
   "_index" :   "website",
   "_type" :    "pageviews",
   "_id" :      "1",
   "_version" : 2,
   "get" : {
     "exists" : true,
     "fields" : {
       "views" : 1
     }
   }
 }
--------------------------------------------------


==== Updates and conflicts

In the introduction to this section, we said that the smaller window
between the _retrieve_ and _reindex_ steps, the smaller the opportunity for
conflicting changes. But it doesn't eliminate it completely.
It is still possible that a request from another process could change the
document before `update` has managed to reindex it.

To avoid losing data, the `update` API retrieves the current `_version`
of the document in the _retrieve_ step, and passes that to the `index` request
during the _reindex_ step.
If another process has changed the document in between _retrieve_ and _reindex_,
then the `_version` number won't match and the update request will fail.

For many uses of partial update, it doesn't matter that a document has been
changed.  For instance, if two processes are both incrementing the page
view counter, it doesn't matter in which order it happens -- if a conflict
occurs, the only thing we need to do is to reattempt the update.

This can be done automatically by setting the `retry_on_conflict` parameter to
the number of times that `update` should retry before failing -- it defaults
to `0`.

[source,js]
--------------------------------------------------
 POST /website/pageviews/1/_update?retry_on_conflict=5  
 {
    "script" : "ctx._source.views+=1",
    "upsert": {
        "views": 0
    }
 }
--------------------------------------------------

    
NOTE: The `update` API does not accept the `version` parameter. You should
only use `update` for changes that should be applied regardless
of the current version of the document.

