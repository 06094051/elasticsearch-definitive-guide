[[equality-filters]]
=== Equality filters

[[term-filter]]
==== `term` filter

The most basic filter is the `term` filter, which asks: Does field `foo`
contain the exact value `bar`? It it similar to the SQL statement:
`WHERE foo = bar`.

For instance, does the field `status` contain the string `"active"`:

[source,js]
--------------------------------------------------
 { "term" : { "status" : "active" }}
--------------------------------------------------


Does field `count` contain the number `5`:

[source,js]
--------------------------------------------------
 { "term" : { "count" : 5 }}
--------------------------------------------------


Does field `publish_date` contain the date `2013/01/01`:

[source,js]
--------------------------------------------------
 { "term" : { "publish_date" : "2013/01/01" }}
--------------------------------------------------


Term filters work for all simple data types (e.g. strings, numbers, dates).
They only match *exact* values: if you search for `active` but your field
contains `ACTIVE` then the term filter will not match.

[NOTE]
====
A `term` filter checks if the field *contains* the value, rather than if
the field is *equal to* the value, because a field might contain multiple
values.

For instance, a document whose `tags` field contains an array of tags:

[source,js]
--------------------------------------------------
 { "tags" : [ "elasticsearch", "lucene", "nosql" ]}
--------------------------------------------------


will match a filter looking for just one of those tags:

[source,js]
--------------------------------------------------
 { "term": { "tags": "elasticsearch" }}
--------------------------------------------------


====

[[terms-filter]]
==== `terms` filter

The `terms` filter is like the `term` filter but allows you to check for
multiple values at once, much like the `IN` operator in SQL.  By default,
it checks whether the field contains *ANY* of the listed values:

[source,js]
--------------------------------------------------
 { "terms" : { "status" : [ "active", "pending" ] }}
--------------------------------------------------


As mentioned above, a field may contain multiple values. You can
check whether the field contains *ALL* of the listed values by seting the
`execution` parameter to `"and"`:

[source,js]
--------------------------------------------------
 {
     "terms" : {
         "execution" : "and",
         "tags" :      [ "elasticsearch", "nosql" ]
     }
 }
--------------------------------------------------


===== `execution`

The `execution` parameter accepts a variety of arguments, which
are documented in the
http://www.elasticsearch.org/guide/reference/query-dsl/terms-filter.html[`terms` filter reference],
but the most useful values are:

`plain`::

This is the default value.  The `terms` filter checks for *ANY* of the
listed terms, and caches the result of the whole filter. Use `plain`
if you typically filter on the same combination of terms.

`bool`::

The `terms` filter runs a `term` query for each listed term and combines their
results, looking for *ANY* matching term.  The final result of the filter is
not cached, but the result for each individual term *is* cached.
Use `bool` if the combination of terms you filter on varies often.

`and`::

The `terms` filter runs a `term` query for each listed term and combines their
results, looking for *ALL* matching terms.  The final result of the filter is
not cached, but the result for each individual term *is* cached. Use `and`
if you need to check that all terms are present.
