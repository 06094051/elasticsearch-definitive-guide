[[equality_filters]]
=== Equality filters

[[term_filter]]
==== `term` filter

The most basic filter is the `term` filter, which asks: ``Does field `foo`
contain the exact value `bar`?'' It it similar to the SQL statement:
`WHERE foo = bar`.

For instance, does the field `status` contain the string `"active"`:

    { "term" : { "status" : "active" }}

Does field `count` contain `5`:

    { "term" : { "count" : 5 }}

Does field `publish_date` contain the date `2012-01-01`:

    { "term" : { "publish_date" : "2012-01-01" }}

Term filters work for all simple data types (e.g. strings, numbers, dates).
They only match *exact* values: if you search for `active` but your field
contains `ACTIVE` then the term filter will not match.

[NOTE]
====
A term filter checks if the field *contains* the value, rather than if
the field is *equal to* the value, because a field might contain multiple
values.  For instance, an array of `tags`:

        { "tags" : [ "elasticsearch", "lucene", "nosql" ]}

====

[[terms_filter]]
==== `terms` filter

The `terms` filter is like the `term` filter but allows you to check for
multiple values at once, much like the `IN` operator in SQL.  By default,
it checks whether the field contains *ANY* of the listed values:

    { "terms" : { "status" : [ "active", "pending" ] }}

As mentioned above, a field may contain *multiple* values. You can set the
`execution` option to `"and"` to check whether the field contains *ALL* of the
listed values:

    {
        "terms" : {
            "execution" : "and",
            "tags" :      [ "elasticsearch", "nosql" ]
        }
    }

[NOTE]
====
The default value for `execution` is `"plain"`. It can also be set to `"bool"`,
which (like `plain`) checks for ANY of the listed values, but it has
different performance characteristics.
The final result of the `plain` query is cached, while under `bool` execution,
the result for each individual term is cached.  If you regularly
filter on the same combination of terms then `plain` execution is preferred.
But if the combination of terms varies, then the `bool` execution might
be faster.
====
