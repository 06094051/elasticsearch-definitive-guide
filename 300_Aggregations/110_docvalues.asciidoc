[[doc-values]]
=== Doc Values

The default data structure for field data is called _paged-bytes_, and it is
basically what it sounds like: pages of packed bytes.  The representation is
compressed, but optimized for in-memory access and speed.  It is not serialized
to disk at all and is "all or nothing".  It either fits in memory, or it
cannot be loaded.

There is an alternative format known as _doc values_.  Doc values are special
data structures which are built at index-time and written to disk.  They are then
loaded to memory and accessed in place of the standard paged-bytes implementation.

The main benefit of doc values is lower memory footprint.  With the default
paged-bytes format, if you attempt to load more field data to memory than available
heap space...you'll get an OutOfMemoryException.

By contrast, doc values can stream from disk efficiently and do not require
processing at query-time (unlike paged-bytes, which must be generated).  This
allows you to work with field data that would normally be too large to fit in
memory.

The trade-off is a larger index size and potentially slower field data access.
Doc values are remarkably efficient, so for many queries you might not even notice
the slightly slower speed.  If the doc values are small enough to fit in memory,
the OS will likely have them cached in memory anyway.

You will, however, notice the speed difference when you start working with massive
datasets that are too large to fit in heap.  In these cases, doc values have to
stream from disk and you are limited to the speed of Disk IO.

But, considering that paged-bytes would simply explode, this is often a reasonable
tradeoff for truly massive data.

==== Enabling Doc Values

Doc values can be enabled for numeric fields, geopoints and `not_analyzed` string fields.
They do not currently work with `analyzed` string fields.  Doc values are
enabled in the mapping of a particular field, which means that some fields can
use doc values while the rest use the default paged-bytes.

[source,js]
----
PUT /fielddata/filtering/_mapping
{
    "filtering" : {
        "properties" : {
            "category": {
                "type": "string",
                "index" : "not_analyzed", <1>
                "fielddata": {
                    "format" : "doc_values" <2>
                }
            }
        }
    }
}
----
<1> Doc values can only be enabled on `not_analyzed` string fields, numerics and
geopoints
<2> Doc values are enabled by setting the `"fielddata.format"` parameter to
`doc_values`

That's it!  Queries and aggregations will function as normal...they'll just be
using doc values now.  There is no other configuration necessary.

Work on doc values continues to make them faster and more flexible.  It is possible
doc values will become the default format in the near future, rather than
a feature which must be turned on.



