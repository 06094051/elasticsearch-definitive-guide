[[queries]]
== Query DSL - Queries

While filters provide the same `yes|no` matching capabilities that you would
expect from SQL, queries are about relevance, about how well each document
matches. This concept of relevance is perfectly suited to the imprecise
nature of full text search.

include::Queries/What_is_relevance.asciidoc[]

include::Queries/Using_query_clauses.asciidoc[]

include::Queries/Common_queries.asciidoc[]

include::Queries/Overview.asciidoc[]

include::Queries/Helper_queries.asciidoc[]

include::Queries/Exact_matching.asciidoc[]

include::Queries/Full_text_search.asciidoc[]

include::Queries/Match_query.asciidoc[]

include::Queries/Match_phrase_query.asciidoc[]

include::Queries/Multi_match_query.asciidoc[]

include::Queries/Bool_query.asciidoc[]

include::Queries/Query_boost.asciidoc[]

include::Queries/Dismax_query.asciidoc[]

include::Queries/Query_string_query.asciidoc[]

include::Queries/Partial_words.asciidoc[]

include::Queries/Prefix_queries.asciidoc[]

include::Queries/Wildcard_queries.asciidoc[]

include::Queries/Fuzzy_matching.asciidoc[]

****

LIST OF TOPICS:


fuzziness
? wildcard/prefix
query_string/field
rewriting
debugging with validate and explain



ranges

Compound
 - indices

Multi-term
 - fuzzy
 - prefix
 - wildcard

Complex full text queries
    Complex full text queries combine a number of different full text and multi-term query techniques to find the most relevant documents:
        mlt | mlt_field
        flt | flt_field

Boosting queries
    Boosting queries, which are discussed in [boost] are all about manipulating the relevance score:
        constant_score
        custom_score
        custom_filters_score
        boosting
        custom_boost_factor

Relational queries
    Relational queries are used with nested documents or with parent-child relationships and are discussed in [relations].
        nested
        has_child
        has_parent
        top_children

Span queries
    Span queries are a family of low level term queries which are useful for searching for terms in a particular order or proximity:
        span_term
        span_first
        span_near
        span_not
        span_or
****