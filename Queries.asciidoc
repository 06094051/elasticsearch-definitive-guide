[[queries]]
== Query DSL - Queries

While filters provide the same `yes|no` matching capabilities that you would
expect from SQL, queries are about relevance, about how well each document
matches. This concept of relevance is perfectly suited to the imprecise
nature of full text search.

That said, relevance is not just about full text search. It can equally be
applied to `yes|no` clauses where the more clauses that match, the more
relevant, or to geolocation queries, where closer is better.

.What is relevance?
****
When searching, documents are returned in a particular order.  They
could be sorted on the `last_modified` time, but the default is to sort
them from most relevant to least relevant. This relevance score is called
`_score`.

Each query clause generates a `_score` which is combined with the other
scores from the other query clauses to calculate a final `_score`.
Each type of query clause can calculate
its score in a different way depending on its purpose. Typical factors that
are taken into account with full text search are:

Term frequency::
  How often does each term appear in the field? The more often, the more
  relevant.

Inverse document frequency::
  How often does each term appear in the index?  The more often, the *less*
  relevant.

Length norm::
  How long is the field? The longer it is, the less likely it is to be
  relevant.

We will discuss how relevance is calculated in more detail in <<boost>>.

****

Text
    match
    multi_match
    field
    query_string

Complex
    flt
    flt_field
    mlt
    mlt_field

Combining
    bool
    dis_max
    filtered
    indices

Boosting
    boosting
    custom_boost_factor
    custom_filters_score
    custom_score
    constant_score

Term
    term
    terms
    range

Multi-term
    fuzzy
    prefix
    wildcard

Relational
    has_child
    has_parent
    top_children
    nested

Span
    span_first
    span_near
    span_not
    span_or
    span_term
