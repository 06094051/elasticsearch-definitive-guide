[[queries]]
== Query DSL - Queries

In <<filters>>, we have discussed how to use filters to perform the simple
`yes|no` searches that we typically associate with SQL queries.
But Elasticsearch is capable of much more than this.

Users today are no longer prepared to tweak a long list of filters in
order to find the information they want. They expect to be able to enter their
query in natural language and to get the right answer.

But what is the ``right answer''?

Compare a query for +``fox hunting news''+ with one for +``fox news hunting''+.
They have the same words, but signal different intents.  What about a
query for +``raspberry pie''+? Is the user really interested in the
Raspberry Pi device, or are they looking for a recipe?

Often, there IS no right answer.  Instead, we try to return the
_best_ answer, that is, the _most relevant_ answer.

Queries are not just about whether a document matches, but about _how well_ it
matches -- how relevant it is. This concept of relevance is perfectly suited
to the imprecise nature of full text search.

include::Queries/What_is_relevance.asciidoc[]

include::Queries/Using_query_clauses.asciidoc[]

include::Queries/Common_queries.asciidoc[]

include::Queries/Overview.asciidoc[]

include::Queries/Helper_queries.asciidoc[]

include::Queries/Exact_matching.asciidoc[]

include::Queries/Full_text_search.asciidoc[]

include::Queries/Match_query.asciidoc[]

include::Queries/Match_phrase_query.asciidoc[]

include::Queries/Multi_match_query.asciidoc[]

include::Queries/Bool_query.asciidoc[]

include::Queries/Query_boost.asciidoc[]

include::Queries/Dismax_query.asciidoc[]

include::Queries/Query_string_query.asciidoc[]

include::Queries/Partial_words.asciidoc[]

include::Queries/Prefix_queries.asciidoc[]

include::Queries/Pattern_matching.asciidoc[]

include::Queries/Fuzzy_matching.asciidoc[]

****

LIST OF TOPICS:


fuzziness
? wildcard/prefix
query_string/field
rewriting
debugging with validate and explain



ranges

Compound
 - indices

Multi-term
 - fuzzy
 - prefix
 - wildcard

Complex full text queries
    Complex full text queries combine a number of different full text and multi-term query techniques to find the most relevant documents:
        mlt | mlt_field
        flt | flt_field

Boosting queries
    Boosting queries, which are discussed in [boost] are all about manipulating the relevance score:
        constant_score
        custom_score
        custom_filters_score
        boosting
        custom_boost_factor

Relational queries
    Relational queries are used with nested documents or with parent-child relationships and are discussed in [relations].
        nested
        has_child
        has_parent
        top_children

Span queries
    Span queries are a family of low level term queries which are useful for searching for terms in a particular order or proximity:
        span_term
        span_first
        span_near
        span_not
        span_or
****