[[多字段]]
=== 字符串排序与多字段

Analyzed string fields are also multivalue fields,((("strings", "sorting on string fields")))((("analyzed fields", "string fields")))((("sorting", "string sorting and multifields"))) but sorting on them seldom
gives you the results you want. If you analyze a string like `fine old art`,
it results in three terms. We probably want to sort alphabetically on the
first term, then the second term, and so forth, but Elasticsearch doesn't have this
information at its disposal at sort time.









你可以使用 `min` 和 `max`  排序模式（默认是 `min` ），但是这会导致排序以 `art` 或是 `old` ，任何一个都不是所希望的



为了以字符串字段进行排序， 这个字段应仅包含一项：
整个 `not_analyzed` 字符串。((("not_analyzed string fields", "sorting on")))  但是我们仍需要 `analyzed` 字段，这样才能以全文进行查询



The naive approach to indexing the same string in two ways would be to include
two separate fields in the document: one that is  `analyzed` for searching,
and one that is `not_analyzed` for sorting.

But  storing the same string twice in the `_source` field is waste of space.
What we really want to do is to pass in a _single field_ but to _index it in two different ways_. All of the _core_ field types (strings, numbers,
Booleans, dates) accept a `fields` parameter ((("mapping (types)", "transforming simple mapping to multifield mapping")))((("types", "core simple field types", "accepting fields parameter")))((("fields parameter")))((("multifield mapping")))that allows you to transform a
simple mapping like

[source,js]
--------------------------------------------------
"tweet": {
    "type":     "string",
    "analyzer": "english"
}
--------------------------------------------------

into a _multifield_ mapping like this:

[source,js]
--------------------------------------------------
"tweet": { <1>
    "type":     "string",
    "analyzer": "english",
    "fields": {
        "raw": { <2>
            "type":  "string",
            "index": "not_analyzed"
        }
    }
}
--------------------------------------------------
// SENSE: 056_Sorting/88_Multifield.json

<1>  `tweet` 主字段 is just the same as before: an `analyzed` full-text
    field.
<2> The new `tweet.raw` subfield is `not_analyzed`.

Now, or at least as soon as we have reindexed our data, we can use the `tweet`
field for search and the `tweet.raw` field for sorting:

[source,js]
--------------------------------------------------
GET /_search
{
    "query": {
        "match": {
            "tweet": "elasticsearch"
        }
    },
    "sort": "tweet.raw"
}
--------------------------------------------------
// SENSE: 056_Sorting/88_Multifield.json

WARNING: Sorting on a full-text `analyzed` field can use a lot of memory.  See
<<fielddata-intro>> for more information.

