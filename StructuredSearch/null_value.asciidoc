
==== Default values for null fields

As we saw above, Elasticsearch basically ignores any `null` value.  If it is
in an array, it is as if nothing was specified.  If it is the value of a field,
it is as if the field wasn't indexed at all.

But sometimes you need to be able to distinguish between a field that doesn't 
have a value, and a field that has been explicitly set to `null`

With the default behavior that we saw above, this is impossible.  The data is 
lost.  Luckily, there is an option that we can set that overwrites explicit 
`null`+s with a "placeholder" value.

Most core types (String, Number, Boolean, Date) support an option to define a 
null value with your own placeholder.  This option is called `null_value` and 
is set in the mappings of a type.

In this mapping, we define a string as the default when a `null` is encountered.
Let's delete our tagging example and recreate it with `null_value` specified:

[source,js]
--------------------------------------------------
DELETE /my_index <1>

PUT /my_index
{
    "mappings" : {
        "posts" : {
            "properties" : {
                "tags" : {
                    "type" : "string",
                    "index" : "not_analyzed",
                    "null_value" : "NULL" <2>
                }
            }
        }
    }
}

POST /my_index/posts/_bulk
{ "index": { "_id": "1" }}
{"tags" : ["search"] }
{ "index": { "_id": "2" }}
{ "tags" : ["search", "open_source"] }
{ "index": { "_id": "3" }}
{ "other_field" : "some data" }
{ "index": { "_id": "4" }}
{ "tags" : null }
{ "index": { "_id": "5" }}
{ "tags" : ["search", null] }

--------------------------------------------------
<1> Delete the old index, since we cannot update the mapping
<2> The new index now specifies `null_value` for tags

Now, whenever an explicit `null` is encountered, Elasticsearch will replace it
with the term `"NULL"`.  This means the term `"NULL"` is now part of the
inverted index, so Elasticsearch can use the term for more advanced behavior.  
It also means that your null-placeholder must be unique and *not used in your 
normal data*, otherwise you'll get some very strange results!

After this indexing, our inverted index will look like this:

[width="50%",frame="topbot"]
|==========================
| Token | DocIDs
|`search`| `1`,`2`,`5`
|`open_source` | `2`
|`NULL` | `4`,`5`
|==========================

.Must match the field's type
****
The null-placeholder that you specify must match the field's type.  For example,
you can't set `null_value` to `"NULL"` for a numeric field, since a string cannot
be indexed as a number.

Make sure you specify the correct type of `null_value` for the field.
****

If we re-run our `missing` filter from before:

[source,js]
--------------------------------------------------
GET /my_index/posts/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "missing" : {"field" : "tags"}
            } 
        }
    }
}
--------------------------------------------------

We get slightly different results: document `4` no longer appears in the hits.
Only document `3` is returned:

[source,js]
--------------------------------------------------
"hits" : [ 
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "3",
      "_score" : 1.0, "_source" : { "other_field" : "some data" }
    } 
]
--------------------------------------------------

This makes sense when you think about what is happening internally.  
Elasticsearch is indexing an actual value for the field (`"NULL"`), which means
the field is not technically missing anymore.

We are now dealing with two different types of "missing" fields.  Fields that
were actually omitted in the original document, and fields that were explicitly
set to `null` but now have a placeholder value.  By default, the `missing` filter
will only show you documents where the field was omitted entirely.

This behavior is modifiable using two different options: `null_value` and 
`existence`.  Both values can be set true or false, and the different 
combinations of these two options will give you different search results.

Here is a matrix with links to the different variations, before we walk
through all the examples:

[width="50%",frame="topbot"]
|==========================
| | 2+^s| `null_values`
| | | True  |False
.2+.^s|`existence` |True  | <<_all_missing_values>> | <<_only_absent_fields>>
|False  |<<_only_explicit_null>> | 
|==========================


==== All null and missing values

If you want all "missing" fields, set both `null_value` and `existence` to true.
This will match all documents that specified either an explicit `null` (and thus
replaced with our null-placeholder `"NULL"`), or where the field was omitted 
entirely.

[source,js]
--------------------------------------------------
GET /my_index/posts/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "missing" : {
                    "field" : "tags",
                    "null_value" : true, <1>
                    "existence" : true <1>
                }
            } 
        }
    }
}

"hits" : [ 
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "4",
      "_score" : 1.0, "_source" : { "tags" : null } <2>
    },
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "5",
      "_score" : 1.0, "_source" : { "tags" : ["search", null] } <2>
    },
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "3",
      "_score" : 1.0, "_source" : { "other_field" : "some data" } <3>
    }
]
--------------------------------------------------
<1> Set both options to true to match all "missing" fields
<2> These documents are returned because `null_value: true`
<3> This document is returned because `existence: true`

When the filter is executed with these options, null-placeholders are considered
equivalent to a field that is completely omitted.  This causes the behavior
where *any* explicit `null` will be matched.  Notice how
document `5` is returned even though there is a "normal" value in the
field as well. 


==== Only explicit null

If you only want to find documents where an explicit `null` was specified (and
ignore documents where the field was omitted entirely), toggle `existence` to 
false:

[source,js]
--------------------------------------------------
GET /my_index/posts/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "missing" : {
                    "field" : "tags",
                    "null_value" : true,
                    "existence" : false <1>
                }
            } 
        }
    }
}

"hits" : [ 
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "4",
      "_score" : 1.0, "_source" : { "tags" : null }
    },
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "5",
      "_score" : 1.0, "_source" : { "tags" : ["search", null] }
    }
]
--------------------------------------------------
<1> By setting `existence` to false, we exclude documents where the field was
omitted entirely

As you can see, the search results now only show documents where an explicit
`null` was provided (including document `5` where a "normal" value is also
present in the multi-valued array).

==== Only absent fields

Lastly, if you inverse the options from the last example, you can find all 
documents where the field was omitted (but ignore the documents where explicit
`null` was provided):

[source,js]
--------------------------------------------------
GET /my_index/posts/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "missing" : {
                    "field" : "tags",
                    "null_value" : false, <1>
                    "existence":true <1>
                }
            } 
        }
    }
}'

"hits" : [ 
    {
      "_index" : "my_index",
      "_type" : "posts",
      "_id" : "3",
      "_score" : 1.0, "_source" : { "other_field" : "some data" }
    }
]
--------------------------------------------------
<1> Set `existence: true` and `null_value: false` to find only "omitted" fields

And the results only show documents where the field was simply not indexed,
completely ignoring all the explicit `null` documents.

==== Missing filter wrap-up

This section was fairly verbose with examples, but the `missing` filter is best 
seen in action to understand how the combination of options affect which 
documents are returned. By mixing/matching options, you can tailor the filter to
return just the documents that you need.

Remember - this advanced behavior only works when you have configured the
field to index a `null_value` as we saw at the beginning of this chapter
(<<_default_values_for_null_fields>>).  If you don't specify a default,
placeholder value...none of this advanced logic will work.




