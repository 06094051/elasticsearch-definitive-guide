
Starting with 0.90.0, the `terms` filter obtained a new feature that allows it to 
fetch terms from a stored document.  Called the Lookup feature, this is 
particularly useful when the list of terms is very large.

Let's use the classic twitter example: You follow 10,000 people on twitter
and want to see what they've been tweeting in the last 24 hours.

The obvious way to accomplish this is by maintaining a document that specifies
all the users that you follow.  This document is updated every time you add or 
remove a user.

[source,js]
--------------------------------------------------
{
  "following" : ["1", "3", ...]
}
--------------------------------------------------



To search, you must perform a GET on the document to obtain the list of users, 
then a second query with those user IDs in a Terms filter:

[source,js]
--------------------------------------------------
{
  "query" : {
    "filtered" : {
      "filter" : {
        "terms" : {
          "user" : [ "1", "3", ... ]
        }
      }
    }
  }
}
--------------------------------------------------


This approach works, but is inefficient (and annoying for the developer). Each 
query requires two full round-trips to the server before you have useful data
to work with.

With the introduction of the Lookup feature, we can now tell Elasticsearch
to load those values directly.  This is simpler for a developer, and avoids an
unnecessary round-trip.

If we tweak our query just a little, we get this:

[source,js]
--------------------------------------------------
{
  "query" : {
    "filtered" : {
      "filter" : {
        "terms" : {
          "user" : {
            "index" : "users",
            "type" : "user",
            "id" : "2",
            "path" : "following"
          },
          "_cache_key" : "user_2_friends"
        }
      }
    }
  }
}
--------------------------------------------------


In this query, we have a few new properties that facilitate the lookup process.
`index`, `type` and `id` allow you to specify where the document lives in
your elasticsearch cluster.  `Path` controls which field should be loaded
as the terms list.

`_cache_key` controls the name that Elasticsearch internally associates with
the filter.  This is recommended for memory usage reasons, as discussed later in
<<_cache_key>>.

.Cross-index lookup
****
It's important to note that the document you are "looking up" doesn't need to
reside in the same index as your search query.  You can easily search one index
and extract terms from a different index.

This can give you considerable flexibility when organizing data, but it can also
give extra performance.

Elasticsearch prefers to get the lookup document locally if possible, 
since this avoids an inter-cluster round-trip to get the document.  An easy
performance trick is auto-replicating your "lookup" index to all nodes.  

This guarantees a local copy of all lookup documents on each node, which makes 
all `terms` lookups very fast.
****


