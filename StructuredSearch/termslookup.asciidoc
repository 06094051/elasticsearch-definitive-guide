
In 0.90.0, the Terms filter obtained a new feature that allows it to fetch terms
from a stored document.  Called the Lookup feature, this is particularly useful
when the list of terms is very large.

Let's use the classic twitter example: You follow 10,000 people on twitter
and want to see what they've been tweeting in the last 24 hours.

The obvious way to accomplish this is by maintaining a document that specifies
all the users that you follow.  This document is updated every time you add or remove
a user.

    {
      "following" : ["1", "3", ...]
    }


To search, I perform a GET on the document to obtain the list of users, then
a second query with those user IDs in a Terms filter:

    {
      "query" : {
        "filtered" : {
          "filter" : {
            "terms" : {
              "user" : [ "1", "3", ... ]
            }
          }
        }
      }
    }

This approach works, but is inefficient (and annoying for the developer).
With the introduction of the Lookup feature, we can now direct Elasticsearch
to load those values directly, avoiding the unnecessary roundtrip.

If we tweak our query just a little, we get this:

    {
      "query" : {
        "filtered" : {
          "filter" : {
            "terms" : {
              "user" : {
                "index" : "users",
                "type" : "user",
                "id" : "2",
                "path" : "following"
              },
              "_cache_key" : "user_2_friends"
            }
          }
        }
      }
    }

In this query, we have a few new properties that facilitate the lookup process.
`Index`, `type` and `id` allow you to specify where the document lives in
your elasticsearch cluster.  `Path` controls which field should be loaded
as the terms list.

`_cache_key` controls the name that Elasticsearch internally associates with
the filter.  This makes it easy to reference later (e.g. if you need to clear
the cache) and is generally recommended.

The Lookup feature is useful, but it also offers a few performance benefits.
Avoiding network roundtrips is the obvious benefit, but Elasticsearch also provides
internal caching that makes this process fast. The loaded document is cached
in memory so subsequent lookups will be very fast.

Finally, the Lookup feature prefers to get the document locally so that
inter-cluster roundtrips are not required.  If possible, it is best to store the
"lookup documents" in a separate index that is fully replicated across all your
nodes.  This will allow the Lookup to happen locally no matter where it is
executed.