
==== Caching bitsets on a per-segment basis

Bitsets (and thus filters) are extremely fast, but the real magic comes from
the nature of Lucene segments.  Remember that each Lucene segment is
immutable - once it is written to disk, it is never changed.

When Elasticsearch builds filter bitsets, they are built on a per-segment basis.
And since segments are immutable, that means the associated filter bitsets also
never change.

This has huge performance implications.  Cached filters will remain useful until
the segment is merged.  For large segments that rarely merge, this means your
cached filters will have a very long life-time.  Ultimately, a long lifetime
equates to less CPU and disk I/O spent on evictions and reloading the same data.

Per-segment bitsets also allow incremental updates.  In a B-Tree index (like
those used in relational databases), every insert updates the B-Tree.  For very
large indices, this operation can be very slow.

In Lucene, bitsets are only built for new segments.  Time (and computational
resources) is not wasted on updating the index of older segments.

Lastly, a nice side-effect of per-segment bitsets is if a particular segment doesn't
contain any documents that match the filter (a bitset entirely of zeros). In
these cases, Elasticsearch can completely ignore that segment in the search.

