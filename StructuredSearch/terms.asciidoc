
Now that we have seen the `term` filter and how to combine multiple filters
with `bool`, the `terms` filter will be easy to understand.  At a high level,
the `terms` filter is simply the plural version of the singular `term` filter.

It accepts an array of terms and returns documents which contain one or more
terms.  If we continue using the product dataset introduced at the beginning of 
this chapter, we can construct a `terms` filter to find two different prices

[source,js]
--------------------------------------------------
{
    "query" : {
        "filtered" : {
            "filter" : {
                "terms" : {
                    "price" : [20, 30]
                }
            }
        }
    }
}
--------------------------------------------------

The query will return second and third documents:

[source,json]
--------------------------------------------------
"hits" : [ 
    {
        "_index" : "my_store",
        "_type" : "products",
        "_id" : "2",
        "_score" : 1.0,
        "_source" : { 
          "price" : 20, <2>
          "productID" : "KDKE-B-9947-#kL5"
        }
    },
    {
        "_index" : "my_store",
        "_type" : "products",
        "_id" : "3",
        "_score" : 1.0,
        "_source" : { 
          "price" : 30, <2>
          "productID" : "JODL-X-1937-#pV7"
        }
    }
]
--------------------------------------------------




