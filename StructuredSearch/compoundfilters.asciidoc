
Other than the `Term` filter, the most common operation is combining multiple
filters together at the same time. For example, you need to find all documents 
where "age" is greater than 25 _and_ "gender" is "male".

The `Bool` filter is a compound filter that accepts other filters, combining
them in various boolean combinations.

==== Bool Filter

The Bool filter is composed of three sections:

[source,js]
--------------------------------------------------
{
   "bool" : {
      "must" : [],
      "should" : [],
      "must_not" : [],
   }
}
--------------------------------------------------


 - *Must*: These clauses are required for the document to be returned
 as a match. Effectively, this is equivalent to ANDing all clauses inside the
 `must`.

 - *Should*: These clauses are optional, but one needs to match.  Effectively,
 this is a set of OR clauses.

 - *Must_not*: A document won't be returned if any of these clauses match.  
 Effectively, this is a set of NOT clauses.

Each section of the Bool filter is optional (e.g. you could have a Should clause
and nothing else), and each section can contain one or more filters.

By default, the Bool filter _is not_ cached, unlike the majority of other 
filters. There is a good reason for this: usually, compound filters combine a 
number of dynamically generated conditions.

Caching the "total set" of filters just wastes memory and disk I/O, since that
particular combination of filters is unlikely to surface again.

Sometimes, however, it makes sense to cache the compound filter.  If you find
yourself always specifying the same combination of filters inside a Bool,
consider caching the entire compound set by setting `_cache` to true.



==== Filter ordering

TODO  Do we talk about this?  We removed the and/or/not so filter order isnt
as important anymore...