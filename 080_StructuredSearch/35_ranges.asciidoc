
When dealing with numbers
in this chapter, we have so far only searched for exact numbers.  In practice, 
filtering on ranges tends to be more useful.  For example, find all products
with a price greater than $20 and less than $40.

In SQL terms, a range can be expressed as:

[source,sql]
--------------------------------------------------
SELECT document
FROM products
WHERE price BETWEEN 20 AND 40
--------------------------------------------------


Elasticsearch has a `range` filter, which, unsurprisingly, allows you to filter
ranges:

[source,js]
--------------------------------------------------
"range" : {
    "price" : {
        "gt" : 20 ,
        "lt" : 40
    } 
}
--------------------------------------------------

The `range` filter supports both inclusive and exclusive ranges, through
combinations of the following options:

 - `gt`: greater than (`>`), non-inclusive
 - `gte`: greater than or equal (`>=`), inclusive
 - `lt`: less than (`<`), non-inclusive
 - `lte`: less than or equal (`<=`), inclusive


.Example range filter
[source,js]
--------------------------------------------------
GET /my_store/products/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : { <1>
                    "price" : {
                        "gt" : 20,
                        "lt" : 40
                    } 
                }
            }
        }
    }
}
--------------------------------------------------
<1> The filter that we saw above, placed inside a `filtered` query

If you need an unbounded range (e.g. just `>20`), simply omit the one
of the boundaries:

[source,js]
--------------------------------------------------
GET /my_store/products/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : {
                    "price" : {
                        "gt" : 20
                    } 
                }
            }
        }
    }
}
--------------------------------------------------

==== Ranges on dates
The range filter also works on date fields:

[source,js]
--------------------------------------------------
GET /my_store/products/_search
{
    "query" : {
        "filtered" : {
            "query" : {},
            "filter" : {
                "range" : {
                    "timestamp" : {
                        "gt" : "2014-01-01 00:00:00",
                        "lt" : "2014-01-07 00:00:00"
                    } 
                }
            }
        }
    }
}
--------------------------------------------------

The date field also supports date math operations, which can be used in the
`range` filter.  For example, if we want to find all documents that have
a timestamp sometime in the last hour:

[source,js]
--------------------------------------------------
GET /my_store/products/_search
{
    "query" : {
        "filtered" : {
            "query" : {},
            "filter" : {
                "range" : {
                    "timestamp" : {
                        "gt" : "now-1h"
                    } 
                }
            }
        }
    }
}
--------------------------------------------------

This filter will now constantly find all documents with a timestamp greater than
the current time minus 1 hour, making the filter a "sliding window" across
your documents.

Date math can also be applied to actual dates, rather than a placeholder like
`now`.  For example, we ask for timestamps greater than a specified time:

[source,js]
--------------------------------------------------
GET /my_store/products/_search
{
    "query" : {
        "filtered" : {
            "query" : {},
            "filter" : {
                "range" : {
                    "timestamp" : {
                        "gt" : "2014-01-01 00:00:00",
                        "lt" : "2014-01-01 00:00:00||+1M"
                    } 
                }
            }
        }
    }
}
--------------------------------------------------

Simply separate the date from the date math with a double pipe (`||`).  In this
example, we asked for all documents in the month of January (`+1M` specifies
one month).

Date math is "calendar aware", so it knows how many days are in each month, 
days in a year, etc.  More details about working with dates can be found
in <<dates>>

==== Ranges on strings
The range filter can also operate on string fields.  String ranges are 
calculated lexicographically (aka alphabetically).  For example, these values
are sorted in lexicographic order:

 - `5`
 - `a`
 - `ab`
 - `abb`
 - `abc`
 - `b`

If we want a range from `ab` to `abc`, we can use the same `range` filter
syntax:

[source,js]
--------------------------------------------------
GET /my_store/products/_search
{
    "query" : {
        "filtered" : {
            "query" : {},
            "filter" : {
                "range" : {
                    "title" : {
                        "gt" : "ab",
                        "lt" : "abc"
                    } 
                }
            }
        }
    }
}
--------------------------------------------------

.Be careful of cardinality
****
Numeric and date fields are indexed in such a way that ranges are very efficient
to calculate.  This is not the case for string fields, however.  To perform
a range on a string field, Elasticsearch is effectively performing a `term`
filter for every term that falls in the range.  This is much slower than
a date or numeric range, and the slowness is exacerbated by having more
unique terms in your index (or larger ranges).

In general, just remember that the higher your field's cardinality (e.g. the
number of unique values in the field), the slower a string range will be.
****

